[{"categories":["tech"],"content":"A small weather app built with React and cloudflare pages and hono framework with cloudflare workers.","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/"},{"categories":["tech"],"content":"It‚Äôs been more than a year since I‚Äôve started working with typescript and the Node ecosystem, and throughout I have not written a single line of frontend code, Which I think is strange for some folks since I get asked about most things related to frontend, and they are surprised when I say I don‚Äôt know ReAcT. So I decided to change that and take a look at the frontend world. To be honest, I‚Äôm not particularly interested in frontend and cosmetic stuff, but I do genuinely appreciate a good user experience and the thought process and craftsmanship that goes into making one. And what‚Äôs a better way to understand something than to get your hands dirty with it? üí≠ TBH, I used to think that web front-end can‚Äôt be that much work since everything is baked into the browsers; you just add some structure and styling here and there, don‚Äôt have to think about logic and stuff‚Ä¶ And spoiler alert: boy, I was wrong‚Ä¶ ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:0:0","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#"},{"categories":["tech"],"content":" What are we building?So I did some research, and to no one‚Äôs surprise, the most used(over) and popular option for the web is no doubt React. And for the project I was planning and started building a simple ChatGPT-like chat app that calls OpenAI‚Äôs api for generation, but failed miserably as I was not able to remotely make it as I liked and was spending too much time to get everything look as I wanted with the shittiest CSS knowledge I have, so I gave up, and after looking a bit more, I found that movie rating and weather app are kind of like hello-world of the frontend, so with my lowered expectations and someone‚Äôs left-over design code, I started building a weather app. At the same time, I wanted to try the latest and greatest things that are currently available. Though the most popular solutions seem to be Next and Vercel, I like vercel‚Äôs service, but in my opinion, they‚Äôre way too overrated, and some of the other services are far superior to them. My personal favourite is Cloudflare Pages. In my opinion, Cloudflare has some of the best solutions for most things related to the web. At the end, I decided to build a simple single-page weather app using react as a framework with weather data from openweathermap, and to proxy api calls to openweathermap I decided to try cloudflare-pages function which is powered by cloudflare workers. And to make things more interesting, I decided to use hono framework for cloudflare workers. I like edge computing and serverless stuff some is sometimes overused but mostly convenient. ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:1:0","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#what-are-we-building"},{"categories":["tech"],"content":" Final Stack React - Frontend Framework Cloudflare Pages - Hosting Cloudflare Workers/function - Serverless Functions (used for proxying api calls) Hono - A small, simple, and ultrafast web framework for the Edges. OpenWeatherMap - Weather Data API ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:1:1","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#final-stack"},{"categories":["tech"],"content":" The ProcessI‚Äôm not going to go over every step of the process like some tutorial, but I‚Äôll try to go over my general feelings about the process and the experience I had with it. ReactFrom my experiences, I know some of the common things about the build process, how things are built and bundled, what code ships to the browser, and stuff. So it‚Äôs easy(er) for me to pick vite and typescript; for jsx(tsx) part, it‚Äôs not that bad, but everything else was foreign to me. Initially, I tried to do everything from scratch‚ÄîCSS and everything‚Äîbut later realized it wasn‚Äôt for me, so I decided to use some pre-made design and CSS code, use it as a base, and start building on top of it. At first everything was a piece of cake, but when I started referencing other bigger projects and codebases, it kind of made me overturn a little. I‚Äôve just scratched the surface of React and haven‚Äôt even touched some of the concepts like routing, complex state management, and other stuff, but I think it gave me a broader perspective for a change. Cloudflare PagesGreat service, great support, never had major issues with it, loves the simplicity and speed of it. Cloudflare function ‚úçÔ∏è Not to be confused with cloudflare workers(though they are powered by workers), the cloudflare function is part of the cloudflare pages platform, for building full-stack(ish) apps. Cloudflare Pages, on the other hand, is a bit of a different story. I have worked with cloudflare workers countless times, and I linked their web-standard api and have good docs with good enough dev experience with Wrangler cli. But not everything that applies to workers is the same for the cloudflare pages function, the most notable difference is the way you run the code locally. For workers, I use wrangler with a toml file and just use wrangler dev to run, and everything works as expected, but for the function, you have to use wrangler pages command which was introduced in v2, but after some trial and error, I managed to get it working. I like the feature that you just set up routes based on the directory structure, and you can write directly in Typescript without needing to set up a build process or anything. HonoHono is a small, simple, and ultrafast web framework for the Edges. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute@Edge, Deno, Bun, Vercel, Netlify, Lagon, AWS Lambda, Lambda@Edge, and Node.js. A demonstration to create an application for Cloudflare Workers with Hono. I used it as just a simple router for my proxy function and used their client for type inference on the frontend. I think it has a lot of potential going forward as a minimalistic framework for edge. I had tiny issues with it here and there and don‚Äôt like its current state of type-system, though it‚Äôs currently under development. I‚Äôm not going to complain about it. Looking forward to seeing how it evolves. OpenWeatherMapThe most popular weather api out there, I think it‚Äôs good enough for my use case, and I don‚Äôt have any complaints about it as it provides a free tier with 1000req/day. I went ahead a step and used a simple caching mechanism for the api calls, using cloudflare KV don‚Äôt think it‚Äôs the best solution for the purpose, but some caching is better than no caching. Initially, I wanted to use upstash but didn‚Äôt want to add another dependency on other services. Result Final Look Screenshot Takeaways If I were to start over and do the same for production, I would set up a monorepo for the function and hono related code. I would use a more robust caching mechanism like redis or memcached. I would set up a more streamline build process for production and development. For actual team projects, I would use a better alternative like Remix which has more streamline support for edge environments like cloudflare workers. ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:1:2","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#the-process"},{"categories":["tech"],"content":" The ProcessI‚Äôm not going to go over every step of the process like some tutorial, but I‚Äôll try to go over my general feelings about the process and the experience I had with it. ReactFrom my experiences, I know some of the common things about the build process, how things are built and bundled, what code ships to the browser, and stuff. So it‚Äôs easy(er) for me to pick vite and typescript; for jsx(tsx) part, it‚Äôs not that bad, but everything else was foreign to me. Initially, I tried to do everything from scratch‚ÄîCSS and everything‚Äîbut later realized it wasn‚Äôt for me, so I decided to use some pre-made design and CSS code, use it as a base, and start building on top of it. At first everything was a piece of cake, but when I started referencing other bigger projects and codebases, it kind of made me overturn a little. I‚Äôve just scratched the surface of React and haven‚Äôt even touched some of the concepts like routing, complex state management, and other stuff, but I think it gave me a broader perspective for a change. Cloudflare PagesGreat service, great support, never had major issues with it, loves the simplicity and speed of it. Cloudflare function ‚úçÔ∏è Not to be confused with cloudflare workers(though they are powered by workers), the cloudflare function is part of the cloudflare pages platform, for building full-stack(ish) apps. Cloudflare Pages, on the other hand, is a bit of a different story. I have worked with cloudflare workers countless times, and I linked their web-standard api and have good docs with good enough dev experience with Wrangler cli. But not everything that applies to workers is the same for the cloudflare pages function, the most notable difference is the way you run the code locally. For workers, I use wrangler with a toml file and just use wrangler dev to run, and everything works as expected, but for the function, you have to use wrangler pages command which was introduced in v2, but after some trial and error, I managed to get it working. I like the feature that you just set up routes based on the directory structure, and you can write directly in Typescript without needing to set up a build process or anything. HonoHono is a small, simple, and ultrafast web framework for the Edges. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute@Edge, Deno, Bun, Vercel, Netlify, Lagon, AWS Lambda, Lambda@Edge, and Node.js. A demonstration to create an application for Cloudflare Workers with Hono. I used it as just a simple router for my proxy function and used their client for type inference on the frontend. I think it has a lot of potential going forward as a minimalistic framework for edge. I had tiny issues with it here and there and don‚Äôt like its current state of type-system, though it‚Äôs currently under development. I‚Äôm not going to complain about it. Looking forward to seeing how it evolves. OpenWeatherMapThe most popular weather api out there, I think it‚Äôs good enough for my use case, and I don‚Äôt have any complaints about it as it provides a free tier with 1000req/day. I went ahead a step and used a simple caching mechanism for the api calls, using cloudflare KV don‚Äôt think it‚Äôs the best solution for the purpose, but some caching is better than no caching. Initially, I wanted to use upstash but didn‚Äôt want to add another dependency on other services. Result Final Look Screenshot Takeaways If I were to start over and do the same for production, I would set up a monorepo for the function and hono related code. I would use a more robust caching mechanism like redis or memcached. I would set up a more streamline build process for production and development. For actual team projects, I would use a better alternative like Remix which has more streamline support for edge environments like cloudflare workers. ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:1:2","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#react"},{"categories":["tech"],"content":" The ProcessI‚Äôm not going to go over every step of the process like some tutorial, but I‚Äôll try to go over my general feelings about the process and the experience I had with it. ReactFrom my experiences, I know some of the common things about the build process, how things are built and bundled, what code ships to the browser, and stuff. So it‚Äôs easy(er) for me to pick vite and typescript; for jsx(tsx) part, it‚Äôs not that bad, but everything else was foreign to me. Initially, I tried to do everything from scratch‚ÄîCSS and everything‚Äîbut later realized it wasn‚Äôt for me, so I decided to use some pre-made design and CSS code, use it as a base, and start building on top of it. At first everything was a piece of cake, but when I started referencing other bigger projects and codebases, it kind of made me overturn a little. I‚Äôve just scratched the surface of React and haven‚Äôt even touched some of the concepts like routing, complex state management, and other stuff, but I think it gave me a broader perspective for a change. Cloudflare PagesGreat service, great support, never had major issues with it, loves the simplicity and speed of it. Cloudflare function ‚úçÔ∏è Not to be confused with cloudflare workers(though they are powered by workers), the cloudflare function is part of the cloudflare pages platform, for building full-stack(ish) apps. Cloudflare Pages, on the other hand, is a bit of a different story. I have worked with cloudflare workers countless times, and I linked their web-standard api and have good docs with good enough dev experience with Wrangler cli. But not everything that applies to workers is the same for the cloudflare pages function, the most notable difference is the way you run the code locally. For workers, I use wrangler with a toml file and just use wrangler dev to run, and everything works as expected, but for the function, you have to use wrangler pages command which was introduced in v2, but after some trial and error, I managed to get it working. I like the feature that you just set up routes based on the directory structure, and you can write directly in Typescript without needing to set up a build process or anything. HonoHono is a small, simple, and ultrafast web framework for the Edges. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute@Edge, Deno, Bun, Vercel, Netlify, Lagon, AWS Lambda, Lambda@Edge, and Node.js. A demonstration to create an application for Cloudflare Workers with Hono. I used it as just a simple router for my proxy function and used their client for type inference on the frontend. I think it has a lot of potential going forward as a minimalistic framework for edge. I had tiny issues with it here and there and don‚Äôt like its current state of type-system, though it‚Äôs currently under development. I‚Äôm not going to complain about it. Looking forward to seeing how it evolves. OpenWeatherMapThe most popular weather api out there, I think it‚Äôs good enough for my use case, and I don‚Äôt have any complaints about it as it provides a free tier with 1000req/day. I went ahead a step and used a simple caching mechanism for the api calls, using cloudflare KV don‚Äôt think it‚Äôs the best solution for the purpose, but some caching is better than no caching. Initially, I wanted to use upstash but didn‚Äôt want to add another dependency on other services. Result Final Look Screenshot Takeaways If I were to start over and do the same for production, I would set up a monorepo for the function and hono related code. I would use a more robust caching mechanism like redis or memcached. I would set up a more streamline build process for production and development. For actual team projects, I would use a better alternative like Remix which has more streamline support for edge environments like cloudflare workers. ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:1:2","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#cloudflare-pages"},{"categories":["tech"],"content":" The ProcessI‚Äôm not going to go over every step of the process like some tutorial, but I‚Äôll try to go over my general feelings about the process and the experience I had with it. ReactFrom my experiences, I know some of the common things about the build process, how things are built and bundled, what code ships to the browser, and stuff. So it‚Äôs easy(er) for me to pick vite and typescript; for jsx(tsx) part, it‚Äôs not that bad, but everything else was foreign to me. Initially, I tried to do everything from scratch‚ÄîCSS and everything‚Äîbut later realized it wasn‚Äôt for me, so I decided to use some pre-made design and CSS code, use it as a base, and start building on top of it. At first everything was a piece of cake, but when I started referencing other bigger projects and codebases, it kind of made me overturn a little. I‚Äôve just scratched the surface of React and haven‚Äôt even touched some of the concepts like routing, complex state management, and other stuff, but I think it gave me a broader perspective for a change. Cloudflare PagesGreat service, great support, never had major issues with it, loves the simplicity and speed of it. Cloudflare function ‚úçÔ∏è Not to be confused with cloudflare workers(though they are powered by workers), the cloudflare function is part of the cloudflare pages platform, for building full-stack(ish) apps. Cloudflare Pages, on the other hand, is a bit of a different story. I have worked with cloudflare workers countless times, and I linked their web-standard api and have good docs with good enough dev experience with Wrangler cli. But not everything that applies to workers is the same for the cloudflare pages function, the most notable difference is the way you run the code locally. For workers, I use wrangler with a toml file and just use wrangler dev to run, and everything works as expected, but for the function, you have to use wrangler pages command which was introduced in v2, but after some trial and error, I managed to get it working. I like the feature that you just set up routes based on the directory structure, and you can write directly in Typescript without needing to set up a build process or anything. HonoHono is a small, simple, and ultrafast web framework for the Edges. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute@Edge, Deno, Bun, Vercel, Netlify, Lagon, AWS Lambda, Lambda@Edge, and Node.js. A demonstration to create an application for Cloudflare Workers with Hono. I used it as just a simple router for my proxy function and used their client for type inference on the frontend. I think it has a lot of potential going forward as a minimalistic framework for edge. I had tiny issues with it here and there and don‚Äôt like its current state of type-system, though it‚Äôs currently under development. I‚Äôm not going to complain about it. Looking forward to seeing how it evolves. OpenWeatherMapThe most popular weather api out there, I think it‚Äôs good enough for my use case, and I don‚Äôt have any complaints about it as it provides a free tier with 1000req/day. I went ahead a step and used a simple caching mechanism for the api calls, using cloudflare KV don‚Äôt think it‚Äôs the best solution for the purpose, but some caching is better than no caching. Initially, I wanted to use upstash but didn‚Äôt want to add another dependency on other services. Result Final Look Screenshot Takeaways If I were to start over and do the same for production, I would set up a monorepo for the function and hono related code. I would use a more robust caching mechanism like redis or memcached. I would set up a more streamline build process for production and development. For actual team projects, I would use a better alternative like Remix which has more streamline support for edge environments like cloudflare workers. ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:1:2","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#cloudflare-function"},{"categories":["tech"],"content":" The ProcessI‚Äôm not going to go over every step of the process like some tutorial, but I‚Äôll try to go over my general feelings about the process and the experience I had with it. ReactFrom my experiences, I know some of the common things about the build process, how things are built and bundled, what code ships to the browser, and stuff. So it‚Äôs easy(er) for me to pick vite and typescript; for jsx(tsx) part, it‚Äôs not that bad, but everything else was foreign to me. Initially, I tried to do everything from scratch‚ÄîCSS and everything‚Äîbut later realized it wasn‚Äôt for me, so I decided to use some pre-made design and CSS code, use it as a base, and start building on top of it. At first everything was a piece of cake, but when I started referencing other bigger projects and codebases, it kind of made me overturn a little. I‚Äôve just scratched the surface of React and haven‚Äôt even touched some of the concepts like routing, complex state management, and other stuff, but I think it gave me a broader perspective for a change. Cloudflare PagesGreat service, great support, never had major issues with it, loves the simplicity and speed of it. Cloudflare function ‚úçÔ∏è Not to be confused with cloudflare workers(though they are powered by workers), the cloudflare function is part of the cloudflare pages platform, for building full-stack(ish) apps. Cloudflare Pages, on the other hand, is a bit of a different story. I have worked with cloudflare workers countless times, and I linked their web-standard api and have good docs with good enough dev experience with Wrangler cli. But not everything that applies to workers is the same for the cloudflare pages function, the most notable difference is the way you run the code locally. For workers, I use wrangler with a toml file and just use wrangler dev to run, and everything works as expected, but for the function, you have to use wrangler pages command which was introduced in v2, but after some trial and error, I managed to get it working. I like the feature that you just set up routes based on the directory structure, and you can write directly in Typescript without needing to set up a build process or anything. HonoHono is a small, simple, and ultrafast web framework for the Edges. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute@Edge, Deno, Bun, Vercel, Netlify, Lagon, AWS Lambda, Lambda@Edge, and Node.js. A demonstration to create an application for Cloudflare Workers with Hono. I used it as just a simple router for my proxy function and used their client for type inference on the frontend. I think it has a lot of potential going forward as a minimalistic framework for edge. I had tiny issues with it here and there and don‚Äôt like its current state of type-system, though it‚Äôs currently under development. I‚Äôm not going to complain about it. Looking forward to seeing how it evolves. OpenWeatherMapThe most popular weather api out there, I think it‚Äôs good enough for my use case, and I don‚Äôt have any complaints about it as it provides a free tier with 1000req/day. I went ahead a step and used a simple caching mechanism for the api calls, using cloudflare KV don‚Äôt think it‚Äôs the best solution for the purpose, but some caching is better than no caching. Initially, I wanted to use upstash but didn‚Äôt want to add another dependency on other services. Result Final Look Screenshot Takeaways If I were to start over and do the same for production, I would set up a monorepo for the function and hono related code. I would use a more robust caching mechanism like redis or memcached. I would set up a more streamline build process for production and development. For actual team projects, I would use a better alternative like Remix which has more streamline support for edge environments like cloudflare workers. ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:1:2","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#hono"},{"categories":["tech"],"content":" The ProcessI‚Äôm not going to go over every step of the process like some tutorial, but I‚Äôll try to go over my general feelings about the process and the experience I had with it. ReactFrom my experiences, I know some of the common things about the build process, how things are built and bundled, what code ships to the browser, and stuff. So it‚Äôs easy(er) for me to pick vite and typescript; for jsx(tsx) part, it‚Äôs not that bad, but everything else was foreign to me. Initially, I tried to do everything from scratch‚ÄîCSS and everything‚Äîbut later realized it wasn‚Äôt for me, so I decided to use some pre-made design and CSS code, use it as a base, and start building on top of it. At first everything was a piece of cake, but when I started referencing other bigger projects and codebases, it kind of made me overturn a little. I‚Äôve just scratched the surface of React and haven‚Äôt even touched some of the concepts like routing, complex state management, and other stuff, but I think it gave me a broader perspective for a change. Cloudflare PagesGreat service, great support, never had major issues with it, loves the simplicity and speed of it. Cloudflare function ‚úçÔ∏è Not to be confused with cloudflare workers(though they are powered by workers), the cloudflare function is part of the cloudflare pages platform, for building full-stack(ish) apps. Cloudflare Pages, on the other hand, is a bit of a different story. I have worked with cloudflare workers countless times, and I linked their web-standard api and have good docs with good enough dev experience with Wrangler cli. But not everything that applies to workers is the same for the cloudflare pages function, the most notable difference is the way you run the code locally. For workers, I use wrangler with a toml file and just use wrangler dev to run, and everything works as expected, but for the function, you have to use wrangler pages command which was introduced in v2, but after some trial and error, I managed to get it working. I like the feature that you just set up routes based on the directory structure, and you can write directly in Typescript without needing to set up a build process or anything. HonoHono is a small, simple, and ultrafast web framework for the Edges. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute@Edge, Deno, Bun, Vercel, Netlify, Lagon, AWS Lambda, Lambda@Edge, and Node.js. A demonstration to create an application for Cloudflare Workers with Hono. I used it as just a simple router for my proxy function and used their client for type inference on the frontend. I think it has a lot of potential going forward as a minimalistic framework for edge. I had tiny issues with it here and there and don‚Äôt like its current state of type-system, though it‚Äôs currently under development. I‚Äôm not going to complain about it. Looking forward to seeing how it evolves. OpenWeatherMapThe most popular weather api out there, I think it‚Äôs good enough for my use case, and I don‚Äôt have any complaints about it as it provides a free tier with 1000req/day. I went ahead a step and used a simple caching mechanism for the api calls, using cloudflare KV don‚Äôt think it‚Äôs the best solution for the purpose, but some caching is better than no caching. Initially, I wanted to use upstash but didn‚Äôt want to add another dependency on other services. Result Final Look Screenshot Takeaways If I were to start over and do the same for production, I would set up a monorepo for the function and hono related code. I would use a more robust caching mechanism like redis or memcached. I would set up a more streamline build process for production and development. For actual team projects, I would use a better alternative like Remix which has more streamline support for edge environments like cloudflare workers. ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:1:2","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#openweathermap"},{"categories":["tech"],"content":" The ProcessI‚Äôm not going to go over every step of the process like some tutorial, but I‚Äôll try to go over my general feelings about the process and the experience I had with it. ReactFrom my experiences, I know some of the common things about the build process, how things are built and bundled, what code ships to the browser, and stuff. So it‚Äôs easy(er) for me to pick vite and typescript; for jsx(tsx) part, it‚Äôs not that bad, but everything else was foreign to me. Initially, I tried to do everything from scratch‚ÄîCSS and everything‚Äîbut later realized it wasn‚Äôt for me, so I decided to use some pre-made design and CSS code, use it as a base, and start building on top of it. At first everything was a piece of cake, but when I started referencing other bigger projects and codebases, it kind of made me overturn a little. I‚Äôve just scratched the surface of React and haven‚Äôt even touched some of the concepts like routing, complex state management, and other stuff, but I think it gave me a broader perspective for a change. Cloudflare PagesGreat service, great support, never had major issues with it, loves the simplicity and speed of it. Cloudflare function ‚úçÔ∏è Not to be confused with cloudflare workers(though they are powered by workers), the cloudflare function is part of the cloudflare pages platform, for building full-stack(ish) apps. Cloudflare Pages, on the other hand, is a bit of a different story. I have worked with cloudflare workers countless times, and I linked their web-standard api and have good docs with good enough dev experience with Wrangler cli. But not everything that applies to workers is the same for the cloudflare pages function, the most notable difference is the way you run the code locally. For workers, I use wrangler with a toml file and just use wrangler dev to run, and everything works as expected, but for the function, you have to use wrangler pages command which was introduced in v2, but after some trial and error, I managed to get it working. I like the feature that you just set up routes based on the directory structure, and you can write directly in Typescript without needing to set up a build process or anything. HonoHono is a small, simple, and ultrafast web framework for the Edges. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute@Edge, Deno, Bun, Vercel, Netlify, Lagon, AWS Lambda, Lambda@Edge, and Node.js. A demonstration to create an application for Cloudflare Workers with Hono. I used it as just a simple router for my proxy function and used their client for type inference on the frontend. I think it has a lot of potential going forward as a minimalistic framework for edge. I had tiny issues with it here and there and don‚Äôt like its current state of type-system, though it‚Äôs currently under development. I‚Äôm not going to complain about it. Looking forward to seeing how it evolves. OpenWeatherMapThe most popular weather api out there, I think it‚Äôs good enough for my use case, and I don‚Äôt have any complaints about it as it provides a free tier with 1000req/day. I went ahead a step and used a simple caching mechanism for the api calls, using cloudflare KV don‚Äôt think it‚Äôs the best solution for the purpose, but some caching is better than no caching. Initially, I wanted to use upstash but didn‚Äôt want to add another dependency on other services. Result Final Look Screenshot Takeaways If I were to start over and do the same for production, I would set up a monorepo for the function and hono related code. I would use a more robust caching mechanism like redis or memcached. I would set up a more streamline build process for production and development. For actual team projects, I would use a better alternative like Remix which has more streamline support for edge environments like cloudflare workers. ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:1:2","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#result"},{"categories":["tech"],"content":" Conclusion Am I a react-dev now? I hate being asked this kind of question, like r u a xyz-developer‚Ä¶?. Well No, I‚Äôm just a software engineer and that‚Äôs all I want to be. Well, I get that at some point and level you do need a greater understanding of some specific thing, and I also get that things like react, node,.net etc‚Ä¶ are not diminutive or trivial projects or technologies; they‚Äôre massive, and for a reason why people associate themselves with those the way they do‚Ä¶ But, at the end, I just don‚Äôt like self-presenting as some kind of frame-worker, language-ist or xyz-ist all I enjoy is solving problems, and even more so the intricacies of solving them‚Ä¶ Overall, this was a fun little experiment to broaden my perspective and understanding of the things that I had neglected for a long time, and I would like to explore more things in the future, not only other frameworks (keeping an eye on svelte, astro, angular) or just the web (would like to explore embedded and IOT), but also anything that interests me. The End ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:2:0","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#conclusion"},{"categories":null,"content":" üå± I‚Äôm currently learning NixOs System Design and how to design systems at scale A Little-bit of Go ","date":"2023-08-19","objectID":"/now/:1:0","series":null,"tags":null,"title":"Now","uri":"/now/#-im-currently-learning"},{"categories":null,"content":" ü§§ I want to learn Programming Languages: Rust, C, C++, Haskell, Erlang or Elixir Networking: Computer Networking - A Top-Down Approach, 7e AI Dive into Deep Learning Modeling \u0026 Design: Blender, Unreal Engine 5 Probably too dumb for any of these ü•≤ ","date":"2023-08-19","objectID":"/now/:2:0","series":null,"tags":null,"title":"Now","uri":"/now/#-i-want-to-learn"},{"categories":["tech","non-tech"],"content":"Welcome friend! I intend use this site as a playground to experiments and share my thoughts on various topics and thing I fine interesting.","date":"2023-08-18","objectID":"/posts/hello-world/","series":[],"tags":["first-post","hugo"],"title":"Hello World","uri":"/posts/hello-world/"},{"categories":["tech","non-tech"],"content":"Welcome friend! I intend use this site as a playground to experiments and share my thoughts on various topics and thing I fine interesting. Or just a dumping ground for my thoughts. You can have more context about me here. ","date":"2023-08-18","objectID":"/posts/hello-world/:0:0","series":[],"tags":["first-post","hugo"],"title":"Hello World","uri":"/posts/hello-world/#"},{"categories":["tech","non-tech"],"content":" What is this site?This site is powered by Hugo and it‚Äôs using DoIt Theme with some extra customization and shortcodes here and there. Hosted on cloudflare pages alongside github pages. I‚Äôm using Github Actions to build and some other related stuff here and there. ","date":"2023-08-18","objectID":"/posts/hello-world/:1:0","series":[],"tags":["first-post","hugo"],"title":"Hello World","uri":"/posts/hello-world/#what-is-this-site"},{"categories":["tech","non-tech"],"content":" A website with speed and security in mind Screenshot from web.dev/measure I‚Äôm not a designer I don‚Äôt have interest nor time to make every corner of my website look at the way I want, So have to rely on others ideas and work which are ok compromise for me. There comes a another problem which platform to choose, As there are a tons and tons of solutions out there from billion CMS or headlessCMS and what not‚Ä¶ I‚Äôve some experience with could-hosted wordpress sites but it has far too many issues to be a viable self-hosted solution, both for speed and security reasons. I tried many thing from free not paid, most of theme were too overkill for my usage and other ones were straight up garbage or overprice for my usage, And I kinda don‚Äôt wanted to pay for something too small of a use case or something that I might just abandon in future. In some of the thing I tried I really liked Ghost and it‚Äôs simplicity and speed, and it‚Äôs open source which is a plus. But it‚Äôs too much of an hassle to setup and maintain and again I don‚Äôt want to pay for service. Hugo Logo There comes static site generators like hugo comes into the picture, there are many ssg out there like Jekyll, Eleventy with there own ecosystem of themes and development. I‚Äôve tried some of them and I have to say hugo is fasssttt you can generate pages at a blazing pace, with build times often under one second. And it has fairly large community around it, and I‚Äôm kinda go nerd now, so for me it‚Äôs a win-win. And most people I follow uses hugo for their blog, that way I can get little reference here and there from them. As I said, I just wanted that works and for me markdown is the way to go, SSG are perfect for this kind of use case. And all of the content of this site is open source and available on github. ","date":"2023-08-18","objectID":"/posts/hello-world/:1:1","series":[],"tags":["first-post","hugo"],"title":"Hello World","uri":"/posts/hello-world/#a-website-with-speed-and-security-in-mind"},{"categories":["tech","non-tech"],"content":" What‚Äôs next? In this site, I intend too mostly focus on Cybersecurity, Free Open Source Software, and privacy guides or general stuff. You can expect writeups, guides, advices, and stuff about my personal projects. I intend to write less filler text and more content as I learn. Hope you‚Äôll enjoy them. ","date":"2023-08-18","objectID":"/posts/hello-world/:2:0","series":[],"tags":["first-post","hugo"],"title":"Hello World","uri":"/posts/hello-world/#whats-next"},{"categories":null,"content":" About MeHi, I‚Äôm Parmar Kudeep like to go with coldter or kicksss online.I‚Äôm a bachelor at CS and IT from India, I write code for fun and unfortunately for living as well. I like to explore anything and everything that remotes my interests and always end up mesmerized how vastly thing are connected along with some of their problems and how divested yet resolute they can be. I consider by self a lone wolf, but do understand the importance of team and teamwork. Now, I don‚Äôt like the term ‚ÄúH4cker‚Äù but like consider my self one not for the skill tho (have still loooooong way to go), but ‚Äòcuz I like tinker with thing sometimes until I understand them whether it‚Äôs os,a piece of code or a life object, And yah! sometimes I just give up because sh*t gets way too complex too fit in my brain. ","date":"2021-01-16","objectID":"/about/:1:0","series":null,"tags":null,"title":"About","uri":"/about/#about-me"},{"categories":null,"content":" Other interests/skills Music: Whatever suits my mood, but likes lo-fi and tolerates chiptune. Currently listening:: Sports: I like cricket. Tho I‚Äôm pro at doge ball. Started to develop a little interest in F1. Books: Not a big bookworm but likes little articles and stuff. Other than that I prefer audiobooks. Movies/TV: What I watch most are anime,asian series/films and in addition, science fiction films. Languages: English: Has some what proficiency in English, good at reading technical articles, but not so good at writing. Gujarati: Native language, Still bad at it tho. Programming Languages: Javascript/Typescript: Currently my main stay, Also I‚Äôm most familiar with. Python: Have work with in the past, can pick it up again easily. Go: Learning, quite liking it‚Äôs simplicity and power, might become my main stay in future. Shell: Don‚Äôt like it, don‚Äôt hate it, don‚Äôt have to‚Ä¶but gets the job done. Some other languages I have used/learn but have been abandoned: Php,Java,C# Technologies of Interest: Linux, Git, Docker, Aws, GithubActions, CD/Ci, Mysql, Postgres, Deno, Nodejs, Bun, MongoDB, Redis, Nginx, Websockets, Socket.io, and more‚Ä¶ Contact Me Email: eWVzIHUgZ290IG1lLCBteSBlbWFpbCBpcyBoaUBrdWxkZWVwLnRlY2guIEFsdGVybmF0aXZlIGlzIGt1bGRlZXBwYXJtYXIzMzNAZ21haWwuY29tIElmIHRoYXQgZG9lc24ndCB3b3JrIHRyeSB0ZWxlZ3JhbS4= Github: https://github.com/coldter/ Telegram: https://t.me/coldter ","date":"2021-01-16","objectID":"/about/:1:1","series":null,"tags":null,"title":"About","uri":"/about/#other-interestsskills"},{"categories":null,"content":" About This Site ‚ÄúFor me, blog is first of all a knowledge management tool, followed by a communication tool. All my articles are meant to be just a knowledge base for myself and maybe for others. I mainly write about thing I‚Äôve not mastered or fully understand yet, so take my writing somewhat critically Showing off has never been my motivation.‚Äù The main topics here mostly would be cybersecurity, FOSS(Free Open Source Software), self-hosting and online privacy. Occasionally I might write about other things that may interest me. Timeline 2023-10-20: Set up the site. https://kuldeep.tech The Internet is vast, and this website is in a corner. And if you are here and not a crawler, then thank you for reading, and even if u r then thank you for your hard work, you have just wasted some watts and increase emissions for no reason. ","date":"2021-01-16","objectID":"/about/:2:0","series":null,"tags":null,"title":"About","uri":"/about/#about-this-site"},{"categories":null,"content":" NOTICEThe content in this blog is only my opinion, I can only try to reduce errors and omissions, but can not guarantee the correctness of the content all the time! So please look at anything in this blog critically. In addition, many of the pictures/banners used on this site are from the Internet. If there is any infringements, please contact me to delete them. ","date":"2021-01-16","objectID":"/about/:2:1","series":null,"tags":null,"title":"About","uri":"/about/#notice"}]