[{"categories":["tech"],"content":"Clonezilla is a great utility for backing up your system; in this post, we are going to get an overview of it by creating a backup image of our boot drive.","date":"2023-09-05","objectID":"/posts/basic-backup-with-clonezilla/","series":["Disk image backup with clonezilla"],"tags":["utility","backup","clonezilla"],"title":"Basic Backup With Clonezilla: Part-I(Backup)","uri":"/posts/basic-backup-with-clonezilla/"},{"categories":["tech"],"content":"I like to try out new things and experiment with my systems quite a lot, and because of that, sometimes things break or don’t quite work as expected. Sometimes it’s a compatibility issue or because I messed up something. And that has sometimes cost me a lot of unnecessary effort and time. I mostly never have to worry about most of my data, as I keep backups for most of it, or they are on cloud storage that I keep in sync with my local storage. It’s the state of my system that sometimes throws me off-guard, like, for instance, when I won’t be able to boot because my new arch update had an issue with my bootloader, or sometimes a software update breaks in some unexpected way and I have to figure out what’s wrong and fix it. So I like to keep a backup of my system state so that I can restore it to a working state if something goes wrong, and I need it to work as soon as possible. And that backup is mostly a disk image of my system with minimal things installed and configured. For that, up until now I’ve used g-parted and dd for the most part, which are fairly basic and dumb utilities and work great. There are other, more advanced solutions out there, like Timeshift and Snapper, but they require a lot more setup and some insight into filesystems. For the most part, in my use case, I just want my system back up and running if I happen to break it. For the most part, I don’t require point-in-time backups or incremental backups. One of the best and most reliable solutions is clonezilla which is a fairly straight-forward piece of software for imaging/cloning most kinds of disks. It also has some quite useful features that can be useful in certain situations. For now, we’ll go over some of the basic features of clonezilla and how to utilize them for simple backup and restore. ","date":"2023-09-05","objectID":"/posts/basic-backup-with-clonezilla/:0:0","series":["Disk image backup with clonezilla"],"tags":["utility","backup","clonezilla"],"title":"Basic Backup With Clonezilla: Part-I(Backup)","uri":"/posts/basic-backup-with-clonezilla/#"},{"categories":["tech"],"content":" What is clonezilla?Clonezilla is a partition and disk imaging/cloning program. Clonezilla saves and restores only used blocks on the hard disk. This increases the clone’s efficiency. It also has some additional features like enhanced support for all the major filesystems; therefore, you can clone GNU/Linux, MS windows, Intel-based Mac OS, FreeBSD, NetBSD, OpenBSD, Minix, VMWare ESX and Chrome OS/Chromium OS, no matter it’s 32-bit (x86) or 64-bit (x86-64) OS, images can be stored on a local disk, ssh server, samba server, or NFS server. Supports image encryption, and with the Clonezilla server, it can be scaled to clone multiple systems at once. There are three types of Clonezilla available: Clonezilla Live, Clonezilla live, Clonezilla lite and server edition. We’ll be using the live edition for our use-case. ","date":"2023-09-05","objectID":"/posts/basic-backup-with-clonezilla/:1:0","series":["Disk image backup with clonezilla"],"tags":["utility","backup","clonezilla"],"title":"Basic Backup With Clonezilla: Part-I(Backup)","uri":"/posts/basic-backup-with-clonezilla/#what-is-clonezilla"},{"categories":["tech"],"content":" Limitations The destination partition must be equal to or larger than the source one. Info Though you can use utilities like gparted another great utility, to resize the data partition to fit your needs, Incremental backup is not implemented yet. Online imaging/cloning are not implemented yet. The partition to be imaged or cloned has to be unmounted. All the files have to be on one medium if you choose to create the recovery ISO file. ","date":"2023-09-05","objectID":"/posts/basic-backup-with-clonezilla/:1:1","series":["Disk image backup with clonezilla"],"tags":["utility","backup","clonezilla"],"title":"Basic Backup With Clonezilla: Part-I(Backup)","uri":"/posts/basic-backup-with-clonezilla/#limitations"},{"categories":["tech"],"content":" Creating a backupFor this purpose, we’ll be using the Clonezilla Live edition’s local device/device to image feature. ","date":"2023-09-05","objectID":"/posts/basic-backup-with-clonezilla/:2:0","series":["Disk image backup with clonezilla"],"tags":["utility","backup","clonezilla"],"title":"Basic Backup With Clonezilla: Part-I(Backup)","uri":"/posts/basic-backup-with-clonezilla/#creating-a-backup"},{"categories":["tech"],"content":" DownloadDownload the latest stable release of Clonezilla Live edition from their download page, in my experience, the official host, SourceForge, is very unreliable. You can download it from here if I happen to have the latest stable version. After downloading the ISO file, you have to burn it to bootable media to boot into it. You can use any tool of your choice to burn the ISO file to bootable media. I personally use ventoy for this purpose, as it’s very easy to use and supports most of the ISO files out of the box (more info about ventoy here). ","date":"2023-09-05","objectID":"/posts/basic-backup-with-clonezilla/:2:1","series":["Disk image backup with clonezilla"],"tags":["utility","backup","clonezilla"],"title":"Basic Backup With Clonezilla: Part-I(Backup)","uri":"/posts/basic-backup-with-clonezilla/#download"},{"categories":["tech"],"content":" Booting into clonezilla Boot into the bootable media you created with clonezilla live edition. You should see a screen similar to the following. select the Clonezilla live (VGA with large font \u0026 TO RAM) it’s the option I had most success with, and in my opinion, it looks better with large fonts. On the next screen, select English as the language, and after that, select to keep the default keyboard layout (for the most part, it should auto-detect the correct one). On the next screen, select Start_Clonezilla to start the clonezilla live edition. ","date":"2023-09-05","objectID":"/posts/basic-backup-with-clonezilla/:2:2","series":["Disk image backup with clonezilla"],"tags":["utility","backup","clonezilla"],"title":"Basic Backup With Clonezilla: Part-I(Backup)","uri":"/posts/basic-backup-with-clonezilla/#booting-into-clonezilla"},{"categories":["tech"],"content":" Using device to image feature On the next screen, select device-image this will create an image of the selected device and save it to another destination. On the next screen, select local_dev to create an image of the local device. This will create an image of the selected device and save it to another connected storage device. Now you will see a screen similar to the following, which suggests inserting any external storage device to save the image to. Insert the storage device and wait for it to be detected by clonezilla. After that, select Enter to continue. On the next screen, you should have a list of all the detected storage devices. If all your storage devices are detected correctly, then you’ll have to press ctrl + c to continue (at first, this part confused me as it requires you to press ctrl + c to continue). On the next screen, you’ll have to select the device you want the backup to be stored on (the destination/USB). Make sure you select the correct device, as this will overwrite the existing data on the selected device. After that, select Enter to continue. On the next screen, you can select no-fsck to skip an additional file system check before creating the image to speed up the process. After that, select Enter to continue. Onto the next screen, make sure the Current selected dir nam: shows / use tab key to select \u003cDone\u003e and press Enter to continue. Press Enter to continue. On the next screen, you can select Beginner to use the default options for creating the image. After that, select Enter to continue. On the next screen, you can select savedisk to create an image of the entire disk. After that, select Enter to continue. Next, you’ll be prompted to enter the name of the image file. You can use the default name or enter a custom name. After that, use tab and Enter to continue. On the next screen, you’ll have to select the device you want to create the image of (the source). Pay attention to the device name and size to make sure you’re selecting the correct device. After selecting the device, press Enter to continue. On the next screen, you can select the default compression level. After that, select Enter to continue. Next up, you can also skip the extra parameters check; press tab and Enter to continue. On the next screen, you’ll be asked if you want to check the image for restorability. You can skip or select the default option. After that, select Enter to continue. Next, select no encryption, or if you want to encrypt the image, select the option with the preferred encryption method. After that, select Enter to continue. After you’ll be prompted to choose an action after finishing the creation of the image, you can select the default option and use tab and Enter to continue. On prompt, press “Enter” to continue. Press “y” to confirm and start the process. If everything is done correctly, the clone process should start, and you should see a screen similar to the following: When everything is done, Clonezilla will prompt you if you want to run it again (when something goes wrong, or you want to choose different options) Then you can choose to power off or reboot to exit clonezilla. After that, select Enter to continue. After that, you can remove the bootable media and reboot your system. ","date":"2023-09-05","objectID":"/posts/basic-backup-with-clonezilla/:2:3","series":["Disk image backup with clonezilla"],"tags":["utility","backup","clonezilla"],"title":"Basic Backup With Clonezilla: Part-I(Backup)","uri":"/posts/basic-backup-with-clonezilla/#using-device-to-image-feature"},{"categories":["tech"],"content":" Conclusion 🚧 Clonezilla is a community-driven project, and something might change in the future. Please read every instruction from clonezilla carefully before proceeding. This is just a guide to get you started. Data loss may occur in the process; make sure you have a good idea of what you’re doing and have a backup of your data before proceeding. Though it’s not the most intuitive piece of software or the most user-friendly one, it’s quite powerful and reliable. But it has served me quite well, and I hope it’ll be useful for you too. And maybe in the following part we’ll go over how to restore the image we created in this part. The End ","date":"2023-09-05","objectID":"/posts/basic-backup-with-clonezilla/:3:0","series":["Disk image backup with clonezilla"],"tags":["utility","backup","clonezilla"],"title":"Basic Backup With Clonezilla: Part-I(Backup)","uri":"/posts/basic-backup-with-clonezilla/#conclusion"},{"categories":["tech"],"content":"Ventoy is are create open source utility for creating bootable media. It has some additional benefits over traditional methods, In this post we are going to get overview of it.","date":"2023-09-03","objectID":"/posts/ventoy-a-great-util-for-bootable-media/","series":[],"tags":["ventoy","bootable-media","linux","windows","iso","usb","utility"],"title":"Ventoy: A Great Utility for Bootable Media","uri":"/posts/ventoy-a-great-util-for-bootable-media/"},{"categories":["tech"],"content":"I distro-hop quite a lot, sometimes to check out the new features of a distro and get a little feel for it, other times just to check the compatibility of different pieces of software. For these reasons, I might stay with a distribution for a long period of time or just for a few things here and there, but no matter the reason, I need to create a bootable media from the respected ISO files and burn them to a USB and so on, and I have to do it every time I want to change the distro for some reason I need a bootable media. Up until now, I have been just using the dd command to create a bootable drive, or for Windows, my go-to choice has been rufus. Both of these methods get the job done, but it’s quite repetitive, and no matter how small the installation ISOs are, once I burn them to a drive, I can’t use the drive for anything other than as boot media. A project called ventoy addresses all these issues with its unique approach to creating and using bootable media. ","date":"2023-09-03","objectID":"/posts/ventoy-a-great-util-for-bootable-media/:0:0","series":[],"tags":["ventoy","bootable-media","linux","windows","iso","usb","utility"],"title":"Ventoy: A Great Utility for Bootable Media","uri":"/posts/ventoy-a-great-util-for-bootable-media/#"},{"categories":["tech"],"content":" What is Ventoy?Ventoy is an open-source tool to create bootable USB drives for ISO/WIM/IMG/VHD(x)/EFI files. With ventoy, you don’t need to format the disk over and over; you just need to copy the ISO/WIM/IMG/VHD(x)/EFI files to the USB drive and boot them directly. You can copy many files at a time, and ventoy will give you a boot menu to select them. It supports BIOS and UEFI, has support for over 1100+ image files, and supports over 90%+ of distros on distrowatch.com including all versions of Windows. I personally never had any compatibility issues with it, but ventoy maintains a compatibility list on their site that is tested and certain to work. To put it in simple terms, Ventoy divides a USB’s storage block into two partitions: one for boot that has all the necessary stuff for booting off of it, and another for storing all the bootable images that you can use as regular storage as well. All we have to do is just copy-paste whatever image media is on the other partition, and we can select it at the boot screen of ventoy. It has really straight-forward guides for installing ventoy as a driver, both for Windows and Linux. For Windows, it has an excellent wizard to just select a USB and create bootable media out of it. In short, I’ll go over a simple way to install it on a Linux machine. ","date":"2023-09-03","objectID":"/posts/ventoy-a-great-util-for-bootable-media/:1:0","series":[],"tags":["ventoy","bootable-media","linux","windows","iso","usb","utility"],"title":"Ventoy: A Great Utility for Bootable Media","uri":"/posts/ventoy-a-great-util-for-bootable-media/#what-is-ventoy"},{"categories":["tech"],"content":" Installation","date":"2023-09-03","objectID":"/posts/ventoy-a-great-util-for-bootable-media/:2:0","series":[],"tags":["ventoy","bootable-media","linux","windows","iso","usb","utility"],"title":"Ventoy: A Great Utility for Bootable Media","uri":"/posts/ventoy-a-great-util-for-bootable-media/#installation"},{"categories":["tech"],"content":" DownloadTo download it, head over to their GitHub releases page and download the latest version’s compressed file for Linux. Extract the downloaded file with: tar -xvf \u003cdownloaded-file\u003e.tar.gz ","date":"2023-09-03","objectID":"/posts/ventoy-a-great-util-for-bootable-media/:2:1","series":[],"tags":["ventoy","bootable-media","linux","windows","iso","usb","utility"],"title":"Ventoy: A Great Utility for Bootable Media","uri":"/posts/ventoy-a-great-util-for-bootable-media/#download"},{"categories":["tech"],"content":" Using Ventoy WebUI Now go to the extracted folder and locate VentoyWeb.sh we’re going to use this to run the Ventoy webUI, which is, in my opinion, the best way to get ventoy running on a USB drive… Now plug in the USB drive you want to use as a bootable drive. Run the following command to run ventoy webUI locally sudo ./VentoyWeb.sh -p 8080 -H 0.0.0.0 ## you should see # =============================================================== # Ventoy Server 1.0.95 is running ... # Please open your browser and visit http://0.0.0.0:8080 # =============================================================== Open a web browser and go to http://127.0.0.1:8080 you should have a web page like this with all your connected USB drives listed. Select the driver you want to use from the drop-down menu and click “Install” on the page. If you don’t see your device listed, try plugging it in and refresh the page. If you still have the problem, select the list all devices from the options menu and refresh… On clicking install, you should follow the warning messages, read them carefully, and proceed if everything seems correct. 💀 Click on install it’ll erase all the data on the selected drive, make sure the selected device is the correct one… After a successful operation, you should see Ventoy In Device showing the latest version number that we have downloaded. At this point, you can close the running http server that we started by running the commands using ctrl+c… 📝 You can clear your USB with the same process by selecting Clear Ventoy from the options’ menu. That process will also clear your data and all the other things that you may have stored on a regular partition. And that’s all you have to do as far as installing Ventoy on a USB media, on successful installation, you should see a volume mounted as Ventoy in your file manager. Warning Don’t change the name of the drive or format it with a different file system; it’ll corrupt the ventoy binding. ","date":"2023-09-03","objectID":"/posts/ventoy-a-great-util-for-bootable-media/:2:2","series":[],"tags":["ventoy","bootable-media","linux","windows","iso","usb","utility"],"title":"Ventoy: A Great Utility for Bootable Media","uri":"/posts/ventoy-a-great-util-for-bootable-media/#using-ventoy-webui"},{"categories":["tech"],"content":" Using VentoyUsing ventoy is as easy as copying and pasting the whatever OS ISO you want into the ventoy volume mount. You can store multiple ISO files, and even utilize this mount as regular storage. When we boot from this disk, we’ll have a selection menu of all the ISOs we pasted, and we can select from which to boot into that ISO without burning it. E.g.:: We will download Arch Linux and Windows 11 IOS and put both of them in the ventoy mount at root. After which, we’ll boot from the USB from our boot menu by selecting our USB drive, and we’ll see a menu something like this: In this menu, we’ll have a list of all the ISO files we have in the ventoy mount. We can select any of them and boot into them; in this case, we’ll select Arch Linux and press enter. And will have some options for boot. Select the first option Boot in normal mode and press enter… And that’s it. We’ll boot into the Arch Linux ISO; we can do the same for the Windows 11 ISO, as well as any other ISO we want to boot into… 🚧 If you have a UEFI security error while booting through Ventoy USB, then from the Administer Secure Boot menu, try enrolling the cert in the UEFI security for trusted execution. Or you can just disable secure boot from the BIOS for quick access. ","date":"2023-09-03","objectID":"/posts/ventoy-a-great-util-for-bootable-media/:2:3","series":[],"tags":["ventoy","bootable-media","linux","windows","iso","usb","utility"],"title":"Ventoy: A Great Utility for Bootable Media","uri":"/posts/ventoy-a-great-util-for-bootable-media/#using-ventoy"},{"categories":["tech"],"content":" ConclusionOverall, Ventoy is one of the best ease-of-life utility I use. If you need to create bootable media quite frequently or just want to have bootable media for your system, ventoy is a great choice. The End ","date":"2023-09-03","objectID":"/posts/ventoy-a-great-util-for-bootable-media/:3:0","series":[],"tags":["ventoy","bootable-media","linux","windows","iso","usb","utility"],"title":"Ventoy: A Great Utility for Bootable Media","uri":"/posts/ventoy-a-great-util-for-bootable-media/#conclusion"},{"categories":["tech"],"content":"A small weather app built with React and cloudflare pages and hono framework with cloudflare workers.","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/"},{"categories":["tech"],"content":"It’s been more than a year since I’ve started working with typescript and the Node ecosystem, and throughout I have not written a single line of frontend code, Which I think is strange for some folks since I get asked about most things related to frontend, and they are surprised when I say I don’t know ReAcT. So I decided to change that and take a look at the frontend world. To be honest, I’m not particularly interested in frontend and cosmetic stuff, but I do genuinely appreciate a good user experience and the thought process and craftsmanship that goes into making one. And what’s a better way to understand something than to get your hands dirty with it? 💭 TBH, I used to think that web front-end can’t be that much work since everything is baked into the browsers; you just add some structure and styling here and there, don’t have to think about logic and stuff… And spoiler alert: boy, I was wrong… ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:0:0","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#"},{"categories":["tech"],"content":" What are we building?So I did some research, and to no one’s surprise, the most used(over) and popular option for the web is no doubt React. And for the project I was planning and started building a simple ChatGPT-like chat app that calls OpenAI’s api for generation, but failed miserably as I was not able to remotely make it as I liked and was spending too much time to get everything look as I wanted with the shittiest CSS knowledge I have, so I gave up, and after looking a bit more, I found that movie rating and weather app are kind of like hello-world of the frontend, so with my lowered expectations and someone’s left-over design code, I started building a weather app. At the same time, I wanted to try the latest and greatest things that are currently available. Though the most popular solutions seem to be Next and Vercel, I like vercel’s service, but in my opinion, they’re way too overrated, and some of the other services are far superior to them. My personal favourite is Cloudflare Pages. In my opinion, Cloudflare has some of the best solutions for most things related to the web. At the end, I decided to build a simple single-page weather app using react as a framework with weather data from openweathermap, and to proxy api calls to openweathermap I decided to try cloudflare-pages function which is powered by cloudflare workers. And to make things more interesting, I decided to use hono framework for cloudflare workers. I like edge computing and serverless stuff some is sometimes overused but mostly convenient. ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:1:0","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#what-are-we-building"},{"categories":["tech"],"content":" Final Stack React - Frontend Framework Cloudflare Pages - Hosting Cloudflare Workers/function - Serverless Functions (used for proxying api calls) Hono - A small, simple, and ultrafast web framework for the Edges. OpenWeatherMap - Weather Data API ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:1:1","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#final-stack"},{"categories":["tech"],"content":" The ProcessI’m not going to go over every step of the process like some tutorial, but I’ll try to go over my general feelings about the process and the experience I had with it. ReactFrom my experiences, I know some of the common things about the build process, how things are built and bundled, what code ships to the browser, and stuff. So it’s easy(er) for me to pick vite and typescript; for jsx(tsx) part, it’s not that bad, but everything else was foreign to me. Initially, I tried to do everything from scratch—CSS and everything—but later realized it wasn’t for me, so I decided to use some pre-made design and CSS code, use it as a base, and start building on top of it. At first everything was a piece of cake, but when I started referencing other bigger projects and codebases, it kind of made me overturn a little. I’ve just scratched the surface of React and haven’t even touched some of the concepts like routing, complex state management, and other stuff, but I think it gave me a broader perspective for a change. Cloudflare PagesGreat service, great support, never had major issues with it, loves the simplicity and speed of it. Cloudflare function ✍️ Not to be confused with cloudflare workers(though they are powered by workers), the cloudflare function is part of the cloudflare pages platform, for building full-stack(ish) apps. Cloudflare Pages, on the other hand, is a bit of a different story. I have worked with cloudflare workers countless times, and I linked their web-standard api and have good docs with good enough dev experience with Wrangler cli. But not everything that applies to workers is the same for the cloudflare pages function, the most notable difference is the way you run the code locally. For workers, I use wrangler with a toml file and just use wrangler dev to run, and everything works as expected, but for the function, you have to use wrangler pages command which was introduced in v2, but after some trial and error, I managed to get it working. I like the feature that you just set up routes based on the directory structure, and you can write directly in Typescript without needing to set up a build process or anything. HonoHono is a small, simple, and ultrafast web framework for the Edges. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute@Edge, Deno, Bun, Vercel, Netlify, Lagon, AWS Lambda, Lambda@Edge, and Node.js. A demonstration to create an application for Cloudflare Workers with Hono. I used it as just a simple router for my proxy function and used their client for type inference on the frontend. I think it has a lot of potential going forward as a minimalistic framework for edge. I had tiny issues with it here and there and don’t like its current state of type-system, though it’s currently under development. I’m not going to complain about it. Looking forward to seeing how it evolves. OpenWeatherMapThe most popular weather api out there, I think it’s good enough for my use case, and I don’t have any complaints about it as it provides a free tier with 1000req/day. I went ahead a step and used a simple caching mechanism for the api calls, using cloudflare KV don’t think it’s the best solution for the purpose, but some caching is better than no caching. Initially, I wanted to use upstash but didn’t want to add another dependency on other services. Result Takeaways If I were to start over and do the same for production, I would set up a monorepo for the function and hono related code. I would use a more robust caching mechanism like redis or memcached. I would set up a more streamline build process for production and development. For actual team projects, I would use a better alternative like Remix which has more streamline support for edge environments like cloudflare workers. ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:1:2","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#the-process"},{"categories":["tech"],"content":" The ProcessI’m not going to go over every step of the process like some tutorial, but I’ll try to go over my general feelings about the process and the experience I had with it. ReactFrom my experiences, I know some of the common things about the build process, how things are built and bundled, what code ships to the browser, and stuff. So it’s easy(er) for me to pick vite and typescript; for jsx(tsx) part, it’s not that bad, but everything else was foreign to me. Initially, I tried to do everything from scratch—CSS and everything—but later realized it wasn’t for me, so I decided to use some pre-made design and CSS code, use it as a base, and start building on top of it. At first everything was a piece of cake, but when I started referencing other bigger projects and codebases, it kind of made me overturn a little. I’ve just scratched the surface of React and haven’t even touched some of the concepts like routing, complex state management, and other stuff, but I think it gave me a broader perspective for a change. Cloudflare PagesGreat service, great support, never had major issues with it, loves the simplicity and speed of it. Cloudflare function ✍️ Not to be confused with cloudflare workers(though they are powered by workers), the cloudflare function is part of the cloudflare pages platform, for building full-stack(ish) apps. Cloudflare Pages, on the other hand, is a bit of a different story. I have worked with cloudflare workers countless times, and I linked their web-standard api and have good docs with good enough dev experience with Wrangler cli. But not everything that applies to workers is the same for the cloudflare pages function, the most notable difference is the way you run the code locally. For workers, I use wrangler with a toml file and just use wrangler dev to run, and everything works as expected, but for the function, you have to use wrangler pages command which was introduced in v2, but after some trial and error, I managed to get it working. I like the feature that you just set up routes based on the directory structure, and you can write directly in Typescript without needing to set up a build process or anything. HonoHono is a small, simple, and ultrafast web framework for the Edges. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute@Edge, Deno, Bun, Vercel, Netlify, Lagon, AWS Lambda, Lambda@Edge, and Node.js. A demonstration to create an application for Cloudflare Workers with Hono. I used it as just a simple router for my proxy function and used their client for type inference on the frontend. I think it has a lot of potential going forward as a minimalistic framework for edge. I had tiny issues with it here and there and don’t like its current state of type-system, though it’s currently under development. I’m not going to complain about it. Looking forward to seeing how it evolves. OpenWeatherMapThe most popular weather api out there, I think it’s good enough for my use case, and I don’t have any complaints about it as it provides a free tier with 1000req/day. I went ahead a step and used a simple caching mechanism for the api calls, using cloudflare KV don’t think it’s the best solution for the purpose, but some caching is better than no caching. Initially, I wanted to use upstash but didn’t want to add another dependency on other services. Result Takeaways If I were to start over and do the same for production, I would set up a monorepo for the function and hono related code. I would use a more robust caching mechanism like redis or memcached. I would set up a more streamline build process for production and development. For actual team projects, I would use a better alternative like Remix which has more streamline support for edge environments like cloudflare workers. ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:1:2","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#react"},{"categories":["tech"],"content":" The ProcessI’m not going to go over every step of the process like some tutorial, but I’ll try to go over my general feelings about the process and the experience I had with it. ReactFrom my experiences, I know some of the common things about the build process, how things are built and bundled, what code ships to the browser, and stuff. So it’s easy(er) for me to pick vite and typescript; for jsx(tsx) part, it’s not that bad, but everything else was foreign to me. Initially, I tried to do everything from scratch—CSS and everything—but later realized it wasn’t for me, so I decided to use some pre-made design and CSS code, use it as a base, and start building on top of it. At first everything was a piece of cake, but when I started referencing other bigger projects and codebases, it kind of made me overturn a little. I’ve just scratched the surface of React and haven’t even touched some of the concepts like routing, complex state management, and other stuff, but I think it gave me a broader perspective for a change. Cloudflare PagesGreat service, great support, never had major issues with it, loves the simplicity and speed of it. Cloudflare function ✍️ Not to be confused with cloudflare workers(though they are powered by workers), the cloudflare function is part of the cloudflare pages platform, for building full-stack(ish) apps. Cloudflare Pages, on the other hand, is a bit of a different story. I have worked with cloudflare workers countless times, and I linked their web-standard api and have good docs with good enough dev experience with Wrangler cli. But not everything that applies to workers is the same for the cloudflare pages function, the most notable difference is the way you run the code locally. For workers, I use wrangler with a toml file and just use wrangler dev to run, and everything works as expected, but for the function, you have to use wrangler pages command which was introduced in v2, but after some trial and error, I managed to get it working. I like the feature that you just set up routes based on the directory structure, and you can write directly in Typescript without needing to set up a build process or anything. HonoHono is a small, simple, and ultrafast web framework for the Edges. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute@Edge, Deno, Bun, Vercel, Netlify, Lagon, AWS Lambda, Lambda@Edge, and Node.js. A demonstration to create an application for Cloudflare Workers with Hono. I used it as just a simple router for my proxy function and used their client for type inference on the frontend. I think it has a lot of potential going forward as a minimalistic framework for edge. I had tiny issues with it here and there and don’t like its current state of type-system, though it’s currently under development. I’m not going to complain about it. Looking forward to seeing how it evolves. OpenWeatherMapThe most popular weather api out there, I think it’s good enough for my use case, and I don’t have any complaints about it as it provides a free tier with 1000req/day. I went ahead a step and used a simple caching mechanism for the api calls, using cloudflare KV don’t think it’s the best solution for the purpose, but some caching is better than no caching. Initially, I wanted to use upstash but didn’t want to add another dependency on other services. Result Takeaways If I were to start over and do the same for production, I would set up a monorepo for the function and hono related code. I would use a more robust caching mechanism like redis or memcached. I would set up a more streamline build process for production and development. For actual team projects, I would use a better alternative like Remix which has more streamline support for edge environments like cloudflare workers. ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:1:2","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#cloudflare-pages"},{"categories":["tech"],"content":" The ProcessI’m not going to go over every step of the process like some tutorial, but I’ll try to go over my general feelings about the process and the experience I had with it. ReactFrom my experiences, I know some of the common things about the build process, how things are built and bundled, what code ships to the browser, and stuff. So it’s easy(er) for me to pick vite and typescript; for jsx(tsx) part, it’s not that bad, but everything else was foreign to me. Initially, I tried to do everything from scratch—CSS and everything—but later realized it wasn’t for me, so I decided to use some pre-made design and CSS code, use it as a base, and start building on top of it. At first everything was a piece of cake, but when I started referencing other bigger projects and codebases, it kind of made me overturn a little. I’ve just scratched the surface of React and haven’t even touched some of the concepts like routing, complex state management, and other stuff, but I think it gave me a broader perspective for a change. Cloudflare PagesGreat service, great support, never had major issues with it, loves the simplicity and speed of it. Cloudflare function ✍️ Not to be confused with cloudflare workers(though they are powered by workers), the cloudflare function is part of the cloudflare pages platform, for building full-stack(ish) apps. Cloudflare Pages, on the other hand, is a bit of a different story. I have worked with cloudflare workers countless times, and I linked their web-standard api and have good docs with good enough dev experience with Wrangler cli. But not everything that applies to workers is the same for the cloudflare pages function, the most notable difference is the way you run the code locally. For workers, I use wrangler with a toml file and just use wrangler dev to run, and everything works as expected, but for the function, you have to use wrangler pages command which was introduced in v2, but after some trial and error, I managed to get it working. I like the feature that you just set up routes based on the directory structure, and you can write directly in Typescript without needing to set up a build process or anything. HonoHono is a small, simple, and ultrafast web framework for the Edges. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute@Edge, Deno, Bun, Vercel, Netlify, Lagon, AWS Lambda, Lambda@Edge, and Node.js. A demonstration to create an application for Cloudflare Workers with Hono. I used it as just a simple router for my proxy function and used their client for type inference on the frontend. I think it has a lot of potential going forward as a minimalistic framework for edge. I had tiny issues with it here and there and don’t like its current state of type-system, though it’s currently under development. I’m not going to complain about it. Looking forward to seeing how it evolves. OpenWeatherMapThe most popular weather api out there, I think it’s good enough for my use case, and I don’t have any complaints about it as it provides a free tier with 1000req/day. I went ahead a step and used a simple caching mechanism for the api calls, using cloudflare KV don’t think it’s the best solution for the purpose, but some caching is better than no caching. Initially, I wanted to use upstash but didn’t want to add another dependency on other services. Result Takeaways If I were to start over and do the same for production, I would set up a monorepo for the function and hono related code. I would use a more robust caching mechanism like redis or memcached. I would set up a more streamline build process for production and development. For actual team projects, I would use a better alternative like Remix which has more streamline support for edge environments like cloudflare workers. ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:1:2","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#cloudflare-function"},{"categories":["tech"],"content":" The ProcessI’m not going to go over every step of the process like some tutorial, but I’ll try to go over my general feelings about the process and the experience I had with it. ReactFrom my experiences, I know some of the common things about the build process, how things are built and bundled, what code ships to the browser, and stuff. So it’s easy(er) for me to pick vite and typescript; for jsx(tsx) part, it’s not that bad, but everything else was foreign to me. Initially, I tried to do everything from scratch—CSS and everything—but later realized it wasn’t for me, so I decided to use some pre-made design and CSS code, use it as a base, and start building on top of it. At first everything was a piece of cake, but when I started referencing other bigger projects and codebases, it kind of made me overturn a little. I’ve just scratched the surface of React and haven’t even touched some of the concepts like routing, complex state management, and other stuff, but I think it gave me a broader perspective for a change. Cloudflare PagesGreat service, great support, never had major issues with it, loves the simplicity and speed of it. Cloudflare function ✍️ Not to be confused with cloudflare workers(though they are powered by workers), the cloudflare function is part of the cloudflare pages platform, for building full-stack(ish) apps. Cloudflare Pages, on the other hand, is a bit of a different story. I have worked with cloudflare workers countless times, and I linked their web-standard api and have good docs with good enough dev experience with Wrangler cli. But not everything that applies to workers is the same for the cloudflare pages function, the most notable difference is the way you run the code locally. For workers, I use wrangler with a toml file and just use wrangler dev to run, and everything works as expected, but for the function, you have to use wrangler pages command which was introduced in v2, but after some trial and error, I managed to get it working. I like the feature that you just set up routes based on the directory structure, and you can write directly in Typescript without needing to set up a build process or anything. HonoHono is a small, simple, and ultrafast web framework for the Edges. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute@Edge, Deno, Bun, Vercel, Netlify, Lagon, AWS Lambda, Lambda@Edge, and Node.js. A demonstration to create an application for Cloudflare Workers with Hono. I used it as just a simple router for my proxy function and used their client for type inference on the frontend. I think it has a lot of potential going forward as a minimalistic framework for edge. I had tiny issues with it here and there and don’t like its current state of type-system, though it’s currently under development. I’m not going to complain about it. Looking forward to seeing how it evolves. OpenWeatherMapThe most popular weather api out there, I think it’s good enough for my use case, and I don’t have any complaints about it as it provides a free tier with 1000req/day. I went ahead a step and used a simple caching mechanism for the api calls, using cloudflare KV don’t think it’s the best solution for the purpose, but some caching is better than no caching. Initially, I wanted to use upstash but didn’t want to add another dependency on other services. Result Takeaways If I were to start over and do the same for production, I would set up a monorepo for the function and hono related code. I would use a more robust caching mechanism like redis or memcached. I would set up a more streamline build process for production and development. For actual team projects, I would use a better alternative like Remix which has more streamline support for edge environments like cloudflare workers. ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:1:2","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#hono"},{"categories":["tech"],"content":" The ProcessI’m not going to go over every step of the process like some tutorial, but I’ll try to go over my general feelings about the process and the experience I had with it. ReactFrom my experiences, I know some of the common things about the build process, how things are built and bundled, what code ships to the browser, and stuff. So it’s easy(er) for me to pick vite and typescript; for jsx(tsx) part, it’s not that bad, but everything else was foreign to me. Initially, I tried to do everything from scratch—CSS and everything—but later realized it wasn’t for me, so I decided to use some pre-made design and CSS code, use it as a base, and start building on top of it. At first everything was a piece of cake, but when I started referencing other bigger projects and codebases, it kind of made me overturn a little. I’ve just scratched the surface of React and haven’t even touched some of the concepts like routing, complex state management, and other stuff, but I think it gave me a broader perspective for a change. Cloudflare PagesGreat service, great support, never had major issues with it, loves the simplicity and speed of it. Cloudflare function ✍️ Not to be confused with cloudflare workers(though they are powered by workers), the cloudflare function is part of the cloudflare pages platform, for building full-stack(ish) apps. Cloudflare Pages, on the other hand, is a bit of a different story. I have worked with cloudflare workers countless times, and I linked their web-standard api and have good docs with good enough dev experience with Wrangler cli. But not everything that applies to workers is the same for the cloudflare pages function, the most notable difference is the way you run the code locally. For workers, I use wrangler with a toml file and just use wrangler dev to run, and everything works as expected, but for the function, you have to use wrangler pages command which was introduced in v2, but after some trial and error, I managed to get it working. I like the feature that you just set up routes based on the directory structure, and you can write directly in Typescript without needing to set up a build process or anything. HonoHono is a small, simple, and ultrafast web framework for the Edges. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute@Edge, Deno, Bun, Vercel, Netlify, Lagon, AWS Lambda, Lambda@Edge, and Node.js. A demonstration to create an application for Cloudflare Workers with Hono. I used it as just a simple router for my proxy function and used their client for type inference on the frontend. I think it has a lot of potential going forward as a minimalistic framework for edge. I had tiny issues with it here and there and don’t like its current state of type-system, though it’s currently under development. I’m not going to complain about it. Looking forward to seeing how it evolves. OpenWeatherMapThe most popular weather api out there, I think it’s good enough for my use case, and I don’t have any complaints about it as it provides a free tier with 1000req/day. I went ahead a step and used a simple caching mechanism for the api calls, using cloudflare KV don’t think it’s the best solution for the purpose, but some caching is better than no caching. Initially, I wanted to use upstash but didn’t want to add another dependency on other services. Result Takeaways If I were to start over and do the same for production, I would set up a monorepo for the function and hono related code. I would use a more robust caching mechanism like redis or memcached. I would set up a more streamline build process for production and development. For actual team projects, I would use a better alternative like Remix which has more streamline support for edge environments like cloudflare workers. ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:1:2","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#openweathermap"},{"categories":["tech"],"content":" The ProcessI’m not going to go over every step of the process like some tutorial, but I’ll try to go over my general feelings about the process and the experience I had with it. ReactFrom my experiences, I know some of the common things about the build process, how things are built and bundled, what code ships to the browser, and stuff. So it’s easy(er) for me to pick vite and typescript; for jsx(tsx) part, it’s not that bad, but everything else was foreign to me. Initially, I tried to do everything from scratch—CSS and everything—but later realized it wasn’t for me, so I decided to use some pre-made design and CSS code, use it as a base, and start building on top of it. At first everything was a piece of cake, but when I started referencing other bigger projects and codebases, it kind of made me overturn a little. I’ve just scratched the surface of React and haven’t even touched some of the concepts like routing, complex state management, and other stuff, but I think it gave me a broader perspective for a change. Cloudflare PagesGreat service, great support, never had major issues with it, loves the simplicity and speed of it. Cloudflare function ✍️ Not to be confused with cloudflare workers(though they are powered by workers), the cloudflare function is part of the cloudflare pages platform, for building full-stack(ish) apps. Cloudflare Pages, on the other hand, is a bit of a different story. I have worked with cloudflare workers countless times, and I linked their web-standard api and have good docs with good enough dev experience with Wrangler cli. But not everything that applies to workers is the same for the cloudflare pages function, the most notable difference is the way you run the code locally. For workers, I use wrangler with a toml file and just use wrangler dev to run, and everything works as expected, but for the function, you have to use wrangler pages command which was introduced in v2, but after some trial and error, I managed to get it working. I like the feature that you just set up routes based on the directory structure, and you can write directly in Typescript without needing to set up a build process or anything. HonoHono is a small, simple, and ultrafast web framework for the Edges. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute@Edge, Deno, Bun, Vercel, Netlify, Lagon, AWS Lambda, Lambda@Edge, and Node.js. A demonstration to create an application for Cloudflare Workers with Hono. I used it as just a simple router for my proxy function and used their client for type inference on the frontend. I think it has a lot of potential going forward as a minimalistic framework for edge. I had tiny issues with it here and there and don’t like its current state of type-system, though it’s currently under development. I’m not going to complain about it. Looking forward to seeing how it evolves. OpenWeatherMapThe most popular weather api out there, I think it’s good enough for my use case, and I don’t have any complaints about it as it provides a free tier with 1000req/day. I went ahead a step and used a simple caching mechanism for the api calls, using cloudflare KV don’t think it’s the best solution for the purpose, but some caching is better than no caching. Initially, I wanted to use upstash but didn’t want to add another dependency on other services. Result Takeaways If I were to start over and do the same for production, I would set up a monorepo for the function and hono related code. I would use a more robust caching mechanism like redis or memcached. I would set up a more streamline build process for production and development. For actual team projects, I would use a better alternative like Remix which has more streamline support for edge environments like cloudflare workers. ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:1:2","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#result"},{"categories":["tech"],"content":" Conclusion Am I a react-dev now? I hate being asked this kind of question, like r u a xyz-developer…?. Well No, I’m just a software engineer and that’s all I want to be. Well, I get that at some point and level you do need a greater understanding of some specific thing, and I also get that things like react, node,.net etc… are not diminutive or trivial projects or technologies; they’re massive, and for a reason why people associate themselves with those the way they do… But, at the end, I just don’t like self-presenting as some kind of frame-worker, language-ist or xyz-ist all I enjoy is solving problems, and even more so the intricacies of solving them… Overall, this was a fun little experiment to broaden my perspective and understanding of the things that I had neglected for a long time, and I would like to explore more things in the future, not only other frameworks (keeping an eye on svelte, astro, angular) or just the web (would like to explore embedded and IOT), but also anything that interests me. The End ","date":"2023-08-29","objectID":"/posts/hono-pages-stack-weatherapp/:2:0","series":[],"tags":["hono","cloudflare","react","frontend","cloudflare-pages","cloudflare-workers"],"title":"Build Cloudflare Pages Stack Weather App","uri":"/posts/hono-pages-stack-weatherapp/#conclusion"},{"categories":null,"content":" About MeHi, I’m Parmar Kuldeep, and I like to go with coldter or kicksss online. I’m a bachelor in CS and IT from India. I write code for fun and, unfortunately, for a living as well. Furthermore, I like to explore anything and everything that piques my interests and always end up mesmerized by how vastly things are connected, along with some of their problems, and how divested yet resolute they can be. I consider myself a lone wolf, but I do understand the importance of teamwork. Now, I don’t like the term “H4cker” but like consider myself one, not for the skill, though (still have a loooooong way to go), but ‘cuz I like to tinker with thing sometimes until I understand them, whether it’s os, a piece of code, or a life object. And yeah! Sometimes I just give up because sh*t gets way too complex to fit in my brain. ","date":"2023-08-19","objectID":"/about/:1:0","series":null,"tags":null,"title":"About","uri":"/about/#about-me"},{"categories":null,"content":" Other interests/skills Music: Whatever suits my mood, but likes lo-fi and tolerate chip-tune. Currently, listening:: Sports: I like cricket. Tho, I’m a pro at doge ball. Started to develop a little interest in F1. Books: Not a big bookworm, but likes little articles and stuff. Other than that, I prefer audiobooks. Movies/TV: What I watch most are anime, Asian series/films and, in addition, science fiction films. Languages: English: Has somewhat proficiency in English, good at reading technical articles but not so good at writing. Gujarati: Native language; still bad at it, though. Programming Languages: Javascript/Typescript: Currently my mainstay and also the one I’m most familiar with. Python: Have worked with it in the past and can pick it up again easily. Go: Learning, quite liking its simplicity and power, might become my mainstay in the future. Shell: Don’t like it, don’t hate it; don’t have to, but it gets the job done. Some other languages I have used/learn but have been abandoned: Php,Java,C# Technologies of Interest: Linux, Git, Docker, Aws, GithubActions, CD/Ci, Mysql, Postgres, Deno, Nodejs, Bun, MongoDB, Redis, Nginx, Websockets, Socket.io, and more… Contact Me Email: eWVzIHUgZ290IG1lLCBteSBlbWFpbCBpcyBoaUBrdWxkZWVwLnRlY2guIEFsdGVybmF0aXZlIGlzIGt1bGRlZXBwYXJtYXIzMzNAZ21haWwuY29tIElmIHRoYXQgZG9lc24ndCB3b3JrIHRyeSB0ZWxlZ3JhbS4= Github: https://github.com/coldter/ Telegram: https://t.me/coldter ","date":"2023-08-19","objectID":"/about/:1:1","series":null,"tags":null,"title":"About","uri":"/about/#other-interestsskills"},{"categories":null,"content":" About This Site “For me, blog is first of all a knowledge management tool, followed by a communication tool. All my articles are meant to be just a knowledge base for myself and maybe for others. I mainly write about thing I’ve not mastered or fully understand yet, so take my writing somewhat critically Showing off has never been my motivation.” The main topics here would be cybersecurity, FOSS (Free Open Source Software), self-hosting, and online privacy. Occasionally, I might write about other things that may interest me. Timeline 2023-10-20: Set up the site. https://kuldeep.tech The Internet is vast, and this website is in a corner. And if you are here and not a crawler, then thank you for reading, and even if u r then thank you for your hard work, you have just wasted some watts and increased emissions for no reason. ","date":"2023-08-19","objectID":"/about/:2:0","series":null,"tags":null,"title":"About","uri":"/about/#about-this-site"},{"categories":null,"content":" NOTICEThe content in this blog is only my opinion, I can only try to reduce errors and omissions, but I can not guarantee the correctness of the content all the time! So please look at anything in this blog critically. In addition, many of the pictures/banners used on this site are from the Internet. If there are any infringements, please contact me to delete them. ","date":"2023-08-19","objectID":"/about/:2:1","series":null,"tags":null,"title":"About","uri":"/about/#notice"},{"categories":null,"content":" 🌱 I’m currently learning NixOs System Design and how to design systems at scale A Little-bit of Go ","date":"2023-08-19","objectID":"/now/:1:0","series":null,"tags":null,"title":"Now","uri":"/now/#-im-currently-learning"},{"categories":null,"content":" 🤤 I want to learn Programming Languages: Rust, C, C++, Haskell, Erlang or Elixir Networking: Computer Networking - A Top-Down Approach, 7e AI Dive into Deep Learning Modelling \u0026 Design: Blender, Unreal Engine 5 Probably too dumb for any of these 🥲 ","date":"2023-08-19","objectID":"/now/:2:0","series":null,"tags":null,"title":"Now","uri":"/now/#-i-want-to-learn"},{"categories":["tech","non-tech"],"content":"Welcome friend! I intend use this site as a playground to experiments and share my thoughts on various topics and thing I fine interesting.","date":"2023-08-18","objectID":"/posts/hello-world/","series":[],"tags":["first-post","hugo"],"title":"Hello World","uri":"/posts/hello-world/"},{"categories":["tech","non-tech"],"content":"Welcome friend! I intend use this site as a playground to experiments and share my thoughts on various topics and thing I fine interesting. Or just a dumping ground for my thoughts. You can have more context about me here. ","date":"2023-08-18","objectID":"/posts/hello-world/:0:0","series":[],"tags":["first-post","hugo"],"title":"Hello World","uri":"/posts/hello-world/#"},{"categories":["tech","non-tech"],"content":" What is this site?This site is powered by Hugo and it’s using DoIt Theme with some extra customization and shortcodes here and there. Hosted on cloudflare pages alongside github pages. I’m using Github Actions to build and some other related stuff here and there. ","date":"2023-08-18","objectID":"/posts/hello-world/:1:0","series":[],"tags":["first-post","hugo"],"title":"Hello World","uri":"/posts/hello-world/#what-is-this-site"},{"categories":["tech","non-tech"],"content":" A website with speed and security in mind Screenshot from web.dev/measure I’m not a designer I don’t have interest nor time to make every corner of my website look at the way I want, So have to rely on others ideas and work which are ok compromise for me. There comes a another problem which platform to choose, As there are a tons and tons of solutions out there from billion CMS or headlessCMS and what not… I’ve some experience with could-hosted wordpress sites but it has far too many issues to be a viable self-hosted solution, both for speed and security reasons. I tried many thing from free not paid, most of theme were too overkill for my usage and other ones were straight up garbage or overprice for my usage, And I kinda don’t wanted to pay for something too small of a use case or something that I might just abandon in future. In some of the thing I tried I really liked Ghost and it’s simplicity and speed, and it’s open source which is a plus. But it’s too much of an hassle to setup and maintain and again I don’t want to pay for service. Hugo Logo There comes static site generators like hugo comes into the picture, there are many ssg out there like Jekyll, Eleventy with there own ecosystem of themes and development. I’ve tried some of them and I have to say hugo is fasssttt you can generate pages at a blazing pace, with build times often under one second. And it has fairly large community around it, and I’m kinda go nerd now, so for me it’s a win-win. And most people I follow uses hugo for their blog, that way I can get little reference here and there from them. As I said, I just wanted that works and for me markdown is the way to go, SSG are perfect for this kind of use case. And all of the content of this site is open source and available on github. ","date":"2023-08-18","objectID":"/posts/hello-world/:1:1","series":[],"tags":["first-post","hugo"],"title":"Hello World","uri":"/posts/hello-world/#a-website-with-speed-and-security-in-mind"},{"categories":["tech","non-tech"],"content":" What’s next? In this site, I intend too mostly focus on Cybersecurity, Free Open Source Software, and privacy guides or general stuff. You can expect writeups, guides, advices, and stuff about my personal projects. I intend to write less filler text and more content as I learn. Hope you’ll enjoy them. ","date":"2023-08-18","objectID":"/posts/hello-world/:2:0","series":[],"tags":["first-post","hugo"],"title":"Hello World","uri":"/posts/hello-world/#whats-next"}]